public class MaskImage extends ImageView{
	int mMaskSource=0;
	int mBackgroundSource=0;
	RuntimeException mException;
	
	public MaskImage(Context context, AttributeSet attrs, int defStyle) {
		super(context, attrs, defStyle);
		// TODO Auto-generated constructor stub
	}

	public MaskImage(Context context, AttributeSet attrs) {
		super(context, attrs);
		TypedArray a = getContext().obtainStyledAttributes(attrs, R.styleable.MaskImage, 0, 0);
		mMaskSource = a.getResourceId(R.styleable.MaskImage_mask, 0);
		mBackgroundSource = a.getResourceId(R.styleable.MaskImage_frame, 0);

		if (mMaskSource == 0 || mBackgroundSource == 0) {
			mException = new IllegalArgumentException(a.getPositionDescription() + 
					": The content attribute is required and must refer to a valid image.");
		}

		if (mException != null) 
			throw mException;
		setBackgroundResource(mBackgroundSource);
		a.recycle();
		
		setScaleType(ScaleType.CENTER_INSIDE);
	}

	public MaskImage(Context context) {
		super(context);
		// TODO Auto-generated constructor stub
	}

	@Override
	public void setImageBitmap(Bitmap bm) {
		new DisplayCirclePic().execute(bm);
	}
	
	private class DisplayCirclePic extends AsyncTask<Bitmap, Void, Bitmap>{

		@Override
		protected Bitmap doInBackground(Bitmap... params) {
			
			Bitmap original = params[0];
			if(original == null) return null;
			Bitmap mask = BitmapFactory.decodeResource(getResources(), mMaskSource);
			Bitmap obj = Bitmap.createScaledBitmap(original, mask.getWidth(), mask.getHeight(), false);
			original = null;
			Bitmap result = Bitmap.createBitmap(mask.getWidth(), mask.getHeight(), Config.ARGB_8888);
			Canvas mCanvas = new Canvas(result);
			Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);		//抗锯齿
			paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));
			mCanvas.drawBitmap(obj, 0, 0, null);
			mCanvas.drawBitmap(mask, 0, 0, paint);
			paint.setXfermode(null);
			return result;
		}
		
		@Override
		protected void onPostExecute(Bitmap result) {
			MaskImage.super.setImageBitmap(result);
		}
		
	};
}
